[tox]
isolated_build = True
requires = tox-venv
envlist = mypy, py36, py37, tidypy
skip_missing_interpreters = True

[testenv]
extras = test
setenv = PROJECT = flaque
whitelist_externals = bash
commands = py36,py37,pytest: bash -c "pytest -lv --full-trace --junit-xml=unittest.xml || if [[ $? -eq 5 ]]; then true; else false; fi"

[testenv:mypy]
deps = mypy
commands = mypy --show-traceback --junit-xml typing.xml --disallow-any-unimported --disallow-untyped-calls --disallow-untyped-defs --warn-redundant-casts --warn-unused-ignores --show-error-context -p {env:PROJECT}

[testenv:tidypy]
deps = tidypy
commands = tidypy check

[testenv:flake8]
deps =
  flake8
  mccabe
commands = flake8 -v --count --statistics --benchmark --show-source --max-complexity=10 {env:PROJECT} setup.py

[testenv:pylint]
deps =
  mccabe
  pep8
  pylint
commands = pylint -v -r y -f colorized --load-plugins=pylint.extensions.docparams,pylint.extensions.docstyle,pylint.extensions.emptystring,pylint.extensions.mccabe,pylint.extensions.comparetozero,pylint.extensions.check_elif,pylint.extensions.overlapping_exceptions,pylint.extensions.redefined_variable_type --max-line-length=79 {env:PROJECT} setup.py

[testenv:bandit]
deps = bandit
commands = bandit -vr -lll -n3 {env:PROJECT} setup.py

[testenv:cleanup]
skip_install = True
commands = bash -c 'set -f; for line in $(cat .gitignore); do if [[ "$line" =~ ^\* ]]; then find . -path .tox -prune -name "$line" -exec rm -r {} >/dev/null 2>&1 \;; else rm -r "$line" >/dev/null 2>&1; fi; done; set +f'
